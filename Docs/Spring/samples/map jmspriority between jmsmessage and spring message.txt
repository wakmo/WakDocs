https://jira.springsource.org/browse/INT-3259
http://forum.spring.io/forum/spring-projects/integration/jms/741455-receive-and-pass-jmspriority-from-jmsmessage-with-defaultmessagelistenercontainer

#map jmspriority between jmsmessage and spring message

////////////////////////////////////////////////////

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/integration/jms
	http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util.xsd">


    <!-- ////////////// Defining Connection Factories ///////////////////////////////////////////////////////////////-->
    <!-- Affina MQ connection-->
    <bean id="affinaMQConnectionFactory" class="com.ibm.mq.jms.MQQueueConnectionFactory">
        <property name="hostName" value="#{appProperties['jms.hostName']}"/>
        <property name="port" value="#{appProperties['jms.port']}"/>
        <property name="queueManager" value="#{appProperties['jms.queueManager']}"/>
        <property name="transportType" value="#{appProperties['jms.transportType']}"/>
        <property name="channel" value="#{appProperties['jms.channel']}"/>
        <property name="useConnectionPooling" value="true"/>
    </bean>

    <!-- Affina MTopic connection-->
    <bean id="affinaMTConnectionFactory" class="com.ibm.mq.jms.MQTopicConnectionFactory">
        <property name="hostName" value="#{appProperties['jms.hostName']}"/>
        <property name="port" value="#{appProperties['jms.port']}"/>
        <property name="queueManager" value="#{appProperties['jms.queueManager']}"/>
        <property name="transportType" value="#{appProperties['jms.transportType']}"/>
        <property name="channel" value="#{appProperties['jms.channel']}"/>
        <property name="useConnectionPooling" value="true"/>
    </bean>
	
	<bean id="affinaCachedMQConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<constructor-arg ref="affinaMQConnectionFactory" />
		<property name="sessionCacheSize" value="#{appProperties['mq.cacheSize']}" />
	</bean>
	
	<bean id="affinaCachedMTConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<constructor-arg ref="affinaMTConnectionFactory" />
		<property name="sessionCacheSize" value="#{appProperties['topic.cacheSize']}" />
	</bean>

    <!-- ////////////// Defining Transaction Managers ///////////////////////////////////////////////////////////////-->
    <!-- Defining transaction managers-->
    <bean id="affinaEspTxManager" class="org.springframework.jms.connection.JmsTransactionManager">
        <property name="connectionFactory" ref="affinaCachedMQConnectionFactory"></property>
    </bean>

    <bean id="semEspTxManager" class="org.springframework.jms.connection.JmsTransactionManager">
        <property name="connectionFactory" ref="affinaCachedMQConnectionFactory"></property>
    </bean>
    <!--
    <bean id="custServEspTxManager" class="org.springframework.jms.connection.JmsTransactionManager">
        <property name="connectionFactory" ref="affinaCachedMQConnectionFactory"></property>
    </bean>
     -->
    <!-- /////////////Defining Message Queues////////////////////////////////////////////////////////////////////////-->
    <!-- Affina-ESP Queues -->
    <bean id="fromAffinaToEsp" class="com.ibm.mq.jms.MQQueue">
        <constructor-arg value="#{appProperties['from.affina.to.esp.queue.name']}"/>
        <property name="targetClient">
            <util:constant static-field="com.ibm.msg.client.wmq.common.CommonConstants.WMQ_CLIENT_JMS_COMPLIANT"/>
        </property>
    </bean>

    <!-- 
	<bean id="fromEspToAffina" class="com.ibm.mq.jms.MQQueue">
        <constructor-arg value="#{appProperties['from.esp.to.affina.queue.name']}"/>
        <property name="targetClient">
            <util:constant static-field="com.ibm.msg.client.wmq.common.CommonConstants.WMQ_CLIENT_JMS_COMPLIANT"/>
        </property>
    </bean>
	-->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
    <!-- SEM-ESP Queues -->
    <bean id="fromSemToEsp" class="com.ibm.mq.jms.MQQueue">
        <constructor-arg value="#{appProperties['from.sem.to.esp.queue.name']}"/>
        <property name="targetClient">
            <util:constant static-field="com.ibm.msg.client.wmq.common.CommonConstants.WMQ_CLIENT_JMS_COMPLIANT"/>
        </property>
    </bean>

    <!-- 
	<bean id="fromEspToSem" class="com.ibm.mq.jms.MQQueue">
        <constructor-arg value="#{appProperties['from.esp.to.sem.queue.name']}"/>
        <property name="targetClient">
            <util:constant static-field="com.ibm.msg.client.wmq.common.CommonConstants.WMQ_CLIENT_JMS_COMPLIANT"/>
        </property>
    </bean>
	-->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- CustomerService-ESP Queues
    <bean id="fromCustServToEsp" class="com.ibm.mq.jms.MQQueue">
        <constructor-arg value="#{appProperties['from.custserv.to.esp.queue.name']}" />
        <property name="targetClient">
            <util:constant static-field="com.ibm.msg.client.wmq.common.CommonConstants.WMQ_CLIENT_JMS_COMPLIANT" />
        </property>
    </bean>

    <bean id="fromEspToCustServ" class="com.ibm.mq.jms.MQQueue">
        <constructor-arg value="#{appProperties['from.esp.to.custserv.queue.name']}" />
        <property name="targetClient">
            <util:constant static-field="com.ibm.msg.client.wmq.common.CommonConstants.WMQ_CLIENT_JMS_COMPLIANT" />
        </property>
    </bean>
    -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- /////////////Defining Message Topics////////////////////////////////////////////////////////////////////////-->
    <!-- Affina-ESP Topics -->
    <bean id="fromEspToAffinaAlarmTopic" class="com.ibm.mq.jms.MQTopic">
        <constructor-arg value="#{appProperties['destName.alarms']}"/>
        <property name="targetClient">
            <util:constant static-field="com.ibm.msg.client.wmq.common.CommonConstants.WMQ_CLIENT_JMS_COMPLIANT"/>
        </property>
    </bean>

    <bean id="fromEspToAffinaProgressTopic" class="com.ibm.mq.jms.MQTopic">
        <constructor-arg value="#{appProperties['destName.progress']}"/>
        <property name="targetClient">
            <util:constant static-field="com.ibm.msg.client.wmq.common.CommonConstants.WMQ_CLIENT_JMS_COMPLIANT"/>
        </property>
    </bean>

    <!-- /////////////Defining Channel Adapter/////////////////////////////////////////////////////////////////////////////////-->
    <!-- FROM Affina TO ESP-->
    <int-jms:message-driven-channel-adapter
            id="jmsFromAffinaToEsp"
            destination="fromAffinaToEsp"
            channel="fromAffinaToEspJMSChannel"
            connection-factory="affinaCachedMQConnectionFactory"
            error-channel="errorChannel"
            header-mapper="priorityHeaderMapper"
            acknowledge="transacted"
            transaction-manager="affinaEspTxManager"
			concurrent-consumers="#{appProperties['affinaEsp.concurrent.consumers']}" 
			max-concurrent-consumers="#{appProperties['affinaEsp.max.concurrent.consumers']}"/>

    <!-- FROM ESP TO Affina -->
    <!-- 
	<int-jms:outbound-channel-adapter
            id="jmsFromEspToAffina"
            destination="fromEspToAffina"
            channel="fromEspToAffinaJMSChannel"
            connection-factory="affinaCachedMQConnectionFactory"
            header-mapper="priorityHeaderMapper"/>
	-->
	<!-- it is required to overwrite header-mapper & jms-template to pass JMSPriority to JMS message-->
	<!-- https://jira.springsource.org/browse/INT-3259 -->
	<int-jms:outbound-channel-adapter 
			id="jmsFromEspToAffina"			
			channel="fromEspToAffinaJMSChannel"
			header-mapper="priorityHeaderMapper"
			jms-template="fromEspToAffinaOutboundPriorityJmsTemplate"/>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  -->
    <!-- FROM SEM TO ESP -->
    <int-jms:message-driven-channel-adapter
            id="jmsFromSemToEsp"
            destination="fromSemToEsp"
            channel="fromSemToEspJMSChannel"
            connection-factory="affinaCachedMQConnectionFactory"
            error-channel="errorChannel"
            header-mapper="priorityHeaderMapper"
            acknowledge="transacted"
            transaction-manager="semEspTxManager"
			concurrent-consumers="#{appProperties['semEsp.concurrent.consumers']}" 
			max-concurrent-consumers="#{appProperties['semEsp.max.concurrent.consumers']}"/>

    <!-- FROM ESP TO SEM -->
    <!-- 
	<int-jms:outbound-channel-adapter
            id="jmsFromEspToSem"
            destination="fromEspToSem"
            channel="fromEspToSemJMSChannel"
            connection-factory="affinaCachedMQConnectionFactory"
            header-mapper="priorityHeaderMapper"/>
	-->
	<!-- it is required to overwrite header-mapper & jms-template to pass JMSPriority to JMS message-->
	<!-- https://jira.springsource.org/browse/INT-3259 -->
	<int-jms:outbound-channel-adapter 
			id="jmsFromEspToSem"			
			channel="fromEspToSemJMSChannel"
			header-mapper="priorityHeaderMapper"
			jms-template="fromEspToSemOutboundPriorityJmsTemplate"/>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  -->
    <!-- FROM Customer Service TO ESP -->
    <!-- <int-jms:message-driven-channel-adapter
            id="jmsFromCustServToEsp"
            destination="fromCustServToEsp"
            channel="fromCustServToEspUnmarshallerChannel"
            connection-factory="affinaCachedMQConnectionFactory"
            header-mapper="priorityHeaderMapper"
            acknowledge="transacted"
            transaction-manager="affinaEspTxManager"
			concurrent-consumers="5" 
			max-concurrent-consumers="5"
			/> -->

    <!-- FROM ESP TO Customer Service -->
    <!-- <int-jms:outbound-channel-adapter
            id="jmsFromEspToCustServ"
            destination="fromEspToCustServ"
            channel="fromEspToCustServJMSChannel"
            connection-factory="affinaCachedMQConnectionFactory"
            header-mapper="priorityHeaderMapper"/> -->
			
	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  -->
	<!-- ~~~~~~~~Error / progress Adaptor~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- FROM ESP TO Affina ALARM TOPIC-->
    <int-jms:outbound-channel-adapter
            id="jmsFromEspToAffinaAlarm"
            destination="fromEspToAffinaAlarmTopic"
            channel="fromEspToAffinaErrorChannel"
            connection-factory="affinaCachedMTConnectionFactory"
            header-mapper="defaultJmsHeaderMapper"/>

    <!-- FROM ESP TO Affina PROGRESS TOPIC-->
    <int-jms:outbound-channel-adapter
            id="jmsFromEspToAffinaProgress"
            destination="fromEspToAffinaProgressTopic"
            channel="fromEspToAffinaProgressChannel"
            connection-factory="affinaCachedMTConnectionFactory"
            header-mapper="defaultJmsHeaderMapper"/>


	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  -->
	
    <!-- Allows to access the JMS message headers via the spring message header.-->
    <bean id="defaultJmsHeaderMapper" class="org.springframework.integration.jms.DefaultJmsHeaderMapper"/>
	
	<bean id="priorityHeaderMapper" class="net.aconite.affina.espinterface.jms.PriorityHeaderMapper"/>  
	
	<bean id="fromEspToAffinaOutboundPriorityJmsTemplate" class="net.aconite.affina.espinterface.jms.PriorityJmsTemplate">
		<property name="connectionFactory" ref="affinaCachedMQConnectionFactory" />
		<property name="defaultDestinationName" value="#{appProperties['from.esp.to.affina.queue.name']}"/>
		<!-- <property name="destinationResolver" ref="jmsDestinationResolver"/> -->
		<property name="pubSubDomain" value="false"/>
		<property name="receiveTimeout" value="#{appProperties['from.esp.to.affina.queue.receive.timeout']}"/>
		<property name="sessionTransacted" value="true" />
		<property name="explicitQosEnabled" value="true" />
	</bean>
	
	<bean id="fromEspToSemOutboundPriorityJmsTemplate" class="net.aconite.affina.espinterface.jms.PriorityJmsTemplate">
		<property name="connectionFactory" ref="affinaCachedMQConnectionFactory" />
		<property name="defaultDestinationName" value="#{appProperties['from.esp.to.sem.queue.name']}"/>
		<!-- <property name="destinationResolver" ref="jmsDestinationResolver"/> -->
		<property name="pubSubDomain" value="false"/>
		<property name="receiveTimeout" value="#{appProperties['from.esp.to.sem.queue.receive.timeout']}"/>
		<property name="sessionTransacted" value="true" />
		<property name="explicitQosEnabled" value="true" />
	</bean>
	
	<!-- 
	<bean id="jmsDestinationResolver" class="org.springframework.jms.support.destination.JndiDestinationResolver">
		<property name="cache">
			 <value>true</value>
		</property>
	</bean>
    -->

</beans>

/////////////////////////////////////////////////////

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.aconite.affina.espinterface.jms;
//https://jira.springsource.org/browse/INT-3259

import java.util.Map;
import net.aconite.affina.espinterface.constants.EspConstant;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.integration.MessageHeaders;
import org.springframework.integration.jms.DefaultJmsHeaderMapper;

/**
 *
 * @author wakkir.muzammil
 */
public class PriorityHeaderMapper extends DefaultJmsHeaderMapper 
{
    private static final Logger logger = LoggerFactory.getLogger(PriorityHeaderMapper.class.getName());


    @Override
    public Map<String, Object> toHeaders(javax.jms.Message jmsMessage) 
    {
        Map<String, Object> headers = super.toHeaders(jmsMessage);
        try 
        {
         headers.put(EspConstant.JMS_Priority, String.valueOf(jmsMessage.getJMSPriority()) );
        }
        catch (javax.jms.JMSException e) 
        {
         logger.warn("jmsMessage.getJMSPriority() did not work.", e);
        }
        return headers;  
    }
    
    @Override
    public void fromHeaders(MessageHeaders headers, javax.jms.Message jmsMessage) 
    {
            super.fromHeaders(headers, jmsMessage);
            try 
            {
                String jmsPriority= String.valueOf(headers.get(EspConstant.JMS_Priority));
                int priority = Integer.parseInt(jmsPriority); // missing catch for numeric exception
                jmsMessage.setJMSPriority(priority); 
            } 
            catch (NumberFormatException e) 
            {
                    logger.warn("jms message must be integer.", e);
            }
            catch (javax.jms.JMSException e) 
            {
                    logger.warn("jmsMessage.setJMSPriority() did not work.", e);
            }
    }

}
/////////////////////////////////////////////////////

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.aconite.affina.espinterface.jms;

//https://jira.springsource.org/browse/INT-3259

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageProducer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jms.core.JmsTemplate;

/**
 *
 * @author wakkir.muzammil
 */
public class PriorityJmsTemplate extends JmsTemplate 
{
	private static final Logger logger = LoggerFactory.getLogger(PriorityJmsTemplate.class.getName());

	@Override
	protected void doSend(MessageProducer producer, Message message) throws JMSException 
        {
		if (isExplicitQosEnabled()) 
                {
			int priority;
			try 
                        {
				priority = message.getJMSPriority();
			}
			catch (javax.jms.JMSException e) 
                        {
				logger.warn("message.getJMSPriority() did not work.", e);
				priority = getPriority();
			}
			producer.send(message, getDeliveryMode(), priority, getTimeToLive());
		}
		else 
                {
			producer.send(message);
		}
	}

}

///////////////////////////////////////////////////////